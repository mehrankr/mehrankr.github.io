fit_gmm = Mclust(tempdf$value, G=2, model="V")
if(is.null(fit_gmm)){
tempdf$GMM.Cluster = "GMM Class NA"
}else{
tempdf$GMM.Cluster = paste("GMM Class", predict.Mclust(fit_gmm, tempdf$value)$classification)
}
list.data.nuc = c(list.data.nuc, list(tempdf))
rm(list="fit_gmm")
# Now for membrane
tempdf = memdf[memdf$name==gene & memdf$block==each_block, ]
fit_gmm = Mclust(tempdf$value, G=2, model="V")
if(is.null(fit_gmm)){
tempdf$GMM.Cluster = "GMM Class NA"
}else{
tempdf$GMM.Cluster = paste("GMM Class", predict.Mclust(fit_gmm, tempdf$value)$classification)
}
list.data.mem = c(list.data.mem, list(tempdf))
rm(list="fit_gmm")
}
}
require(mclust)
list.data.nuc = list()
list.data.mem = list()
set.seed(42)
for(gene in unique(nucdf$name)){
print(gene)
for(each_block in unique(nucdf$block)){
tempdf = nucdf[nucdf$name==gene & nucdf$block==each_block, ]
fit_gmm = Mclust(tempdf$value, G=2, model="V")
if(is.null(fit_gmm)){
tempdf$GMM.Cluster = "GMM Class NA"
}else{
tempdf$GMM.Cluster = paste("GMM Class", predict.Mclust(fit_gmm, tempdf$value)$classification)
}
list.data.nuc = c(list.data.nuc, list(tempdf))
rm(list="fit_gmm")
# Now for membrane
tempdf = memdf[memdf$name==gene & memdf$block==each_block, ]
fit_gmm = Mclust(tempdf$value, G=2, model="V")
if(is.null(fit_gmm)){
tempdf$GMM.Cluster = "GMM Class NA"
}else{
tempdf$GMM.Cluster = paste("GMM Class", predict.Mclust(fit_gmm, tempdf$value)$classification)
}
list.data.mem = c(list.data.mem, list(tempdf))
rm(list="fit_gmm")
}
}
memdf_new = do.call("rbind", list.data.mem)
saveRDS(memdf_new, "membrane_denoised_dataframe_gmm_block_clusters.RDS", compress=TRUE)
#genes = c("TP63", "AREG", "OXTR")
for(gene in genes){
tempdf = nucdf_new[nucdf_new$name==gene, ]
max_val = quantile(tempdf$value, 0.99)
P = ggplot(tempdf, aes(x=value, fill=Type)) +
geom_density(alpha=0.75) +
theme_bw(base_size=14) +
#facet_grid(.~GMM.Cluster, scales="free") +
facet_wrap(~GMM.Cluster, scales="free") +
ggtitle(gene) +
scale_fill_manual(name="", values=rev(c("orange", "purple"))) +
theme(legend.position="bottom") +
coord_cartesian(xlim=c(0, max_val))
list.plots = c(list.plots, list(P))
}
nucdf_new = do.call("rbind", list.data.nuc)
nucdf_new = do.call("rbind", list.data.nuc)
saveRDS(nucdf_new, file="nucleus_denoised_dataframe_gmm_block_clusters.RDS", compress=TRUE)
require(cowplot)
list.plots = list()
genes = c("TP63", "RYR2", "AREG", "OXTR")
#genes = c("TP63", "AREG", "OXTR")
for(gene in genes){
tempdf = nucdf_new[nucdf_new$name==gene, ]
max_val = quantile(tempdf$value, 0.99)
P = ggplot(tempdf, aes(x=value, fill=Type)) +
geom_density(alpha=0.75) +
theme_bw(base_size=14) +
#facet_grid(.~GMM.Cluster, scales="free") +
facet_wrap(~GMM.Cluster, scales="free") +
ggtitle(gene) +
scale_fill_manual(name="", values=rev(c("orange", "purple"))) +
theme(legend.position="bottom") +
coord_cartesian(xlim=c(0, max_val))
list.plots = c(list.plots, list(P))
}
require(ggplot2)
require(cowplot)
list.plots = list()
genes = c("TP63", "RYR2", "AREG", "OXTR")
#genes = c("TP63", "AREG", "OXTR")
for(gene in genes){
tempdf = nucdf_new[nucdf_new$name==gene, ]
max_val = quantile(tempdf$value, 0.99)
P = ggplot(tempdf, aes(x=value, fill=Type)) +
geom_density(alpha=0.75) +
theme_bw(base_size=14) +
#facet_grid(.~GMM.Cluster, scales="free") +
facet_wrap(~GMM.Cluster, scales="free") +
ggtitle(gene) +
scale_fill_manual(name="", values=rev(c("orange", "purple"))) +
theme(legend.position="bottom") +
coord_cartesian(xlim=c(0, max_val))
list.plots = c(list.plots, list(P))
}
P = plot_grid(plotlist=list.plots, nrow=2, ncol=2)
P = plot_grid(plotlist=list.plots, nrow=2, ncol=2)
create_plot(P, "someMarkerGenesScores_denoised", 12, 12)
print(markerdf[markerdf[,1] %in% genes & !grepl("none", markerdf[,3]), ])
markerdf = read.csv("Expected_Marker_Expression_long.csv", header=T)
print(markerdf[markerdf[,1] %in% genes & !grepl("none", markerdf[,3]), ])
print(markerdf[markerdf[,1] %in% genes & !grepl("none", markerdf[,3]), ])
plot(1:10, log2(1:10))
458 - 280
122 + 365
339 + 74
6.46*2/90
3 * 0.144
20000 * 1e3
unlist(strsplit("JASPAR.JUN-var2_MA0489.1, JASPAR.FOS-JUN_MA0099.2, JASPAR.JUN_MA0488.1, JASPAR.BATF-JUN_MA0462.1, JASPAR.JUND-var2_MA0492.1, JASPAR.JUNB_MA0490.1, JASPAR.JUND_MA0491.1, Conservation, DNase.NarrowPeakSignal, ExpScore, PreviousBinding", " ", T))
newdf = data.frame(CellTypes=c('lup_1', 'lup_2', 'lup_3', 'lup_4', 'lup_trans', 'lup_cycling'),
Colors=c('#E41A1C', '#377EB8', '#4DAF4A', '#984EA3', '#FF7F00', '#FFFF33'))
require(ggplot2)
newdf$CellTypes = factor(newdf$CellTypes, levels=newdf$Colors)
P = ggplot(newdf, aes(x=CellType, fill=CellTypes)) +
geom_bar(state="identity", y=1) +
scale_fill_manual(values=newdf$Colors)
plot(P)
P = ggplot(newdf, aes(x=CellTypes, fill=CellTypes)) +
geom_bar(state="identity", y=1) +
scale_fill_manual(values=newdf$Colors)
plot(P)
P = ggplot(newdf, aes(x=CellTypes, fill=CellTypes)) +
geom_bar(stat="identity", y=1) +
scale_fill_manual(values=newdf$Colors)
plot(P)
newdf = data.frame(CellTypes=c('lup_1', 'lup_2', 'lup_3', 'lup_4', 'lup_trans', 'lup_cycling'),
Colors=c('#E41A1C', '#377EB8', '#4DAF4A', '#984EA3', '#FF7F00', '#FFFF33'),
Y=1)
require(ggplot2)
newdf$CellTypes = factor(newdf$CellTypes, levels=newdf$Colors)
P = ggplot(newdf, aes(x=CellTypes, fill=CellTypes, y=Y)) +
geom_bar(stat="identity") +
scale_fill_manual(values=newdf$Colors)
plot(P)
newdf
newdf = data.frame(CellTypes=c('lup_1', 'lup_2', 'lup_3', 'lup_4', 'lup_trans', 'lup_cycling'),
Colors=c('#E41A1C', '#377EB8', '#4DAF4A', '#984EA3', '#FF7F00', '#FFFF33'),
Y=1)
require(ggplot2)
newdf$CellTypes = factor(newdf$CellTypes, levels=newdf$CellTypes)
P = ggplot(newdf, aes(x=CellTypes, fill=CellTypes, y=Y)) +
geom_bar(stat="identity") +
scale_fill_manual(values=newdf$Colors)
plot(P)
colors_10 = c('#1f77b4',
'#ff7f0e',
'#2ca02c',
'#d62728',
'#9467bd',
'#8c564b',
'#e377c2',
'#7f7f7f',
'#bcbd22',
'#17becf')
newdf = data.frame(CellTypes=c('lup_1', 'lup_2', 'lup_3', 'lup_4', 'lup_trans', 'lup_cycling'),
Colors=c('#E41A1C', '#377EB8', '#4DAF4A', '#984EA3', '#FF7F00', '#FFFF33'),
Y=1)
require(ggplot2)
newdf$CellTypes = factor(newdf$CellTypes, levels=newdf$CellTypes)
P = ggplot(newdf, aes(x=CellTypes, fill=CellTypes, y=Y)) +
geom_bar(stat="identity") +
scale_fill_manual(values=colors_10[1:length(colors_10)])
plot(P)
newdf$CellTypes = factor(newdf$CellTypes, levels=newdf$CellTypes)
P = ggplot(newdf, aes(x=CellTypes, fill=CellTypes, y=Y)) +
geom_bar(stat="identity") +
scale_fill_manual(values=colors_10[1:nrow(newdf)])
plot(P)
1244 * 26
4600 / 26
4600 * 26
22 * 26
2200 * 26
paste(c("IL7R", "CCR7", "S100A4", "CD14", "LYZ",
"MS4A1", "CD8A", "FCGR3A", "MS4A7",
"GNLY", "NKG7", "FCER1A", "CST3",
"PPBP"), collapse=", ")
markerdf = data.frame(Genes=c("IL7R", "CCR7", "S100A4", "CD14", "LYZ",
"MS4A1", "CD8A", "FCGR3A", "MS4A7",
"GNLY", "NKG7", "FCER1A", "CST3",
"PPBP"),
CellType=c("CD4+ T", "Naive CD4+ T",
"Memory CD4+", "CD14+ Mono",
"CD14+ Mono",
"B-cell", "CD8+ T",
"FCGR3A+ Mono", "FCGR3A+ Mono",
"NK", "NK",
"DC", "DC", "Platelet"))
markerdf
markerdf[markerdf[order(markerdf$CellType)], ]
markerdf[order(markerdf$CellType), ]
11 * 11
40 * 040
64 * 1.25
80 * 1.25
64 * 1.25 * 1.25
64 * (1.25 ** 2)
64 * (1.25 * 2)
64 * (1.25 ** 2)
64 * 1.25 ** 2
64 * 1.25 ** 3
64 * 1.25 *2 3
64 * 1.25 ** 3
64 * 1.25 ** 2
64 * 1.25 ** 1
120 * 20
a = c(-1, 0, 0.1, 1)
a + min(a) + 0.1
a - min(a) + 0.1
22000 + 80000
250000 + 22000 + 90000
900 * 12
128 * 128
131000 / 128
335 + 107
487 + 71
260 / 40
200 / 6
0.75 * 3000
3000 * 26
80000 / 26
75000 / 26
2200 / 2884
0.763 * 80000
0.763 * 80000 / 26
40 * 40 * 52
mtcars
mtcars[,1]
make_clean_df = function(cur_df){
list.data = lapply(1:ncol(cur_df), function(i){
cur_col_vals = cur_df[, i]
if(cur_col_vals[1] %in% c("float", "int")){
addf = data.frame(
CurCol=as.numeric(
cur_cols_vals[2:length(cur_col_vals)]))
}else{
addf = data.frame(CurCol=cur_cols_vals[2:length(cur_col_vals)])
}
colnames(addf) = colnames(cur_df)[i]
}
outdf = do.call("cbind", list.data)
return(outdf)
}
make_clean_df = function(cur_df){
list.data = lapply(1:ncol(cur_df), function(i){
cur_col_vals = cur_df[, i]
if(cur_col_vals[1] %in% c("float", "int")){
addf = data.frame(
CurCol=as.numeric(
cur_cols_vals[2:length(cur_col_vals)]))
}else{
addf = data.frame(CurCol=cur_cols_vals[2:length(cur_col_vals)])
}
colnames(addf) = colnames(cur_df)[i]
return(addf)
})
outdf = do.call("cbind", list.data)
return(outdf)
}
example_df = data.frame(P1=c("float", 1, 2, 3.5, 2), P2=c("int", 0, 1, 0, 2), P3=c("character", "mehran", "a", "b", "arootin"))
example_df
make_clean_df = function(cur_df){
list.data = lapply(1:ncol(cur_df), function(i){
cur_col_vals = cur_df[, i]
if(cur_col_vals[1] %in% c("float", "int")){
addf = data.frame(
CurCol=as.numeric(
cur_cols_vals[2:length(cur_col_vals)]))
}else{
addf = data.frame(CurCol=cur_cols_vals[2:length(cur_col_vals)])
}
colnames(addf) = colnames(cur_df)[i]
return(addf)
})
outdf = do.call("cbind", list.data)
return(outdf)
}
example_df = data.frame(P1=c("float", 1, 2, 3.5, 2), P2=c("int", 0, 1, 0, 2), P3=c("character", "mehran", "a", "b", "arootin"))
head(example_df)
clean_df = make_clean_df(example_df)
head(clean_df)
make_clean_df = function(cur_df){
list.data = lapply(1:ncol(cur_df), function(i){
cur_col_vals = cur_df[, i]
if(cur_col_vals[1] %in% c("float", "int")){
addf = data.frame(
CurCol=as.numeric(
cur_col_vals[2:length(cur_col_vals)]))
}else{
addf = data.frame(CurCol=cur_cols_vals[2:length(cur_col_vals)])
}
colnames(addf) = colnames(cur_df)[i]
return(addf)
})
outdf = do.call("cbind", list.data)
return(outdf)
}
example_df = data.frame(P1=c("float", 1, 2, 3.5, 2), P2=c("int", 0, 1, 0, 2), P3=c("character", "mehran", "a", "b", "arootin"))
head(example_df)
clean_df = make_clean_df(example_df)
make_clean_df = function(cur_df){
list.data = lapply(1:ncol(cur_df), function(i){
cur_col_vals = cur_df[, i]
if(cur_col_vals[1] %in% c("float", "int")){
addf = data.frame(
CurCol=as.numeric(
cur_col_vals[2:length(cur_col_vals)]))
}else{
addf = data.frame(CurCol=cur_col_vals[2:length(cur_col_vals)])
}
colnames(addf) = colnames(cur_df)[i]
return(addf)
})
outdf = do.call("cbind", list.data)
return(outdf)
}
example_df = data.frame(P1=c("float", 1, 2, 3.5, 2), P2=c("int", 0, 1, 0, 2), P3=c("character", "mehran", "a", "b", "arootin"))
head(example_df)
clean_df = make_clean_df(example_df)
head(clean_df)
clean_df
clean_Df[1,1]
clean_df[1,1]
example_df
clean_df
as.integer
28445000 - 500000
30 * 1.3
30 * 1.15
30 * 1.13
229.01 + 516.55
4700 + 3000
8000 * 0.85
6800 * 0.1
6800 * 0.9
6000 - (225 * 5 * 3) - (225) - 900
291870 * 160
1167480 / 160
1167480 / 291870
temp = matrix(rnorm(400), nrow=50)
dim(prcomp(t(temp))$x)
5700 * 12
485 - 338
720 * 460
720 * 460 / 8000000
720  / 8000000
720 * 960 / 8000000
226 + 516
575 * 1.12
644 - 575
6000 * 24
200 * 0.062
200 * 0.062 / 12
2500 + 2500 + 2400 - 1720
8500 * 24
22500 + 125000 + 90000
237500 + 204000
12000 + 1700 - 300 - 350 - 750 - 1800
12000 + 1700 - 300 - 350 - 750 - 2500
nchar("TGCATTTTTTTCACATCAAAAAAAAAAAAAAAAAAAGAAAACGCGCCGTCATTACCCGCATTAAAGAAAAAGTAATCCCAACGCACTCATCCCCTACGGTTACGGCTGTT")
625 * 2
3072 / 4
3072 / 8
100000 / 256
250000 / 256
3072 / 84
3072 / 384
96 / 12
4 ** 6
180000 * 30000
180000 * 30000 / 12
180000 * 30000 / 12 / 30
4 ** 6
17000 * 12
1700 * 8
1720 * 8
59888 - 52218
491 / 3
491 / 4
a = mtcars
require(ggplot2)
?geom_colour_gradient2
?scale_colour_gradient2
tempdf = data.frame(A=rnorm(1000, mean=0, sd=4))
tempdf$B = sqrt(tempdf$A)
tempdf$B = sqrt(tempdf$A + min(tempdf$A) + 1)
tempdf$B = sqrt(tempdf$A + min(tempdf$A))
tempdf$B = sqrt(tempdf$A + min(tempdf$A) + 3)
sqrt(0)
tempdf$B = sqrt(tempdf$A - min(tempdf$A))
tempdf$C = exp(tempdf$A)
head(tempdf)
P = ggplot(tempdf, aes(x=A, y=B, colour=C)) + geom_point() + scale_colour_gradient2(low="blue", mid="white", high="red3")
P
P = ggplot(tempdf, aes(x=C, y=B, colour=A)) + geom_point() + scale_colour_gradient2(low="blue", mid="white", high="red3")
P
P = ggplot(tempdf, aes(x=C, y=B, colour=A)) + geom_point() + scale_colour_gradient2(low="blue", mid="white", high="red3") + theme(legend.position="bottom")
P
create_plot(P, "~/Downloads/test.pdf", width=6, height=6)
dev.off()
960 * 83
20000 * 1000
1797.27 - 928.26
7.7 CAD - 3.95
7.7 - 3.95
869.01 + 5 + 5 + 3.95 + 0.4
325 * 4
24000 + 15000
13 * 300 * 4
13 * 350 * 4
39000 - 20000
6.99 * 1.13
5 + 5 + 3.95 + 0.4
11e6/26000
29 * 40 * !2
29 * 40 * 12
29 * 40 * 52
7 - 2 + 1 * 6
"6x * 3y = 18xy"
10969 / 3600
install.packages("webshot")
webshot::install_phantomjs()
remotes::install_github("jhelvy/xaringanBuilder")
library(xaringanBuilder)
require(renderthis)
getwd()
setwd("Documents/Projects/mehrankr.github.io/dnaMethylationAnalysis")
build_pdf("dnaMethylationAnalysis.Rmd")
to_pdf("dnaMethylationAnalysis.Rmd")
remotes::install_github('rstudio/chromote')
require(chromote)
to_pdf("dnaMethylationAnalysis.Rmd")
to_pdf("dnaMethylationAnalysis.Rmd")
to_pdf("dnaMethylationAnalysis.Rmd")
350 * 25000
x = seq(-3, 3, by=0.1)
plot(x, atan(x))
plot(x, atan(x) / pi)
plot(x, atan(x/2))
plot(x, atan(x/0.1))
plot(x, atan(x))
tempdf = data.frame(X=x, y=x^2)
plot(tempdf)
tempdf$R = sqrt(tempdf$X^2 + tempdf$Y^2)
tempdf$R = sqrt(tempdf$X^2 + tempdf$y^2)
head(tempdf
)
plot(tempdf$y, tempdf$R)
plot(tempdf$x, tempdf$R)
plot(tempdf$X, tempdf$R)
tempdf$Theta = atan(tempdf$X / tempdf$y)
plot(tempdf$R, tempdf$Theta)
2400 * 18e6
18e6 / 2400
7500 * 25000
3600 / 2400
1500 * 25000
133000 / 12
lets = unlist(strsplit(". < > A C G N R T U Y", " ", T))
lets
plot(1:length(lets), 1:length(lets))
plot(1:length(lets), 1:length(lets), text=lets)
plot(1:length(lets), 1:length(lets))
plot(1:length(lets), 1:length(lets))
text(1:length(lets), 1:length(lets), lets)
require(RColorBrewer)
cols = brewer.pal(length(lets), "Set1")
cols = brewer.pal(length(lets), "Set3")
cols
plot(1:length(lets), 1:length(lets), col="white")
text(1:length(lets), 1:length(lets), lets, cols=cols)
plot(1:length(lets), 1:length(lets), col="white")
text(1:length(lets), 1:length(lets), lets, col=cols)
plot(1:8, 1:8, col=brewer.pal(8, "Set1"))
1300 * 25800
108137 / 26
1300 * 24900
1300 * 25000
2000 * 26 * 10 / 12
350 * 26 * 7 / 12
450 * 26 * 7 / 12
450 * 26
800 * 26
800 * 26 * 7/12
7 * 24
150000 * 9 * 30
(80000 / 12) * 7
170000 * 5 / 12
1700 * 5
1720.4 * 7
46667 + 70833 + 8500 + 12042.8
46667 + 70833 + 8500 + 12042.8 - 155625
46667 + 70833 + 8500 + 12042.8 + 4000
46667 + 70833 + 8500 + 12042.8 + 4000 - 155625
12719 / 66083
8500 + 12042.8
25195 - 20542.9
25195 - 20542.9
25195 - 20542.8
74200000 - 73720000
1.17e-02
