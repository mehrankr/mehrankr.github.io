P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(data=deathreatedf, aes(xmin=date, xmax=date+1, ymin=China, ymax=`Korea, South`), alpha=0.1, colour="pink", fill="pink") +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(data=deathratedf, aes(xmin=date, xmax=date+1, ymin=China, ymax=`Korea, South`), alpha=0.1, colour="pink", fill="pink") +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
plot(P)
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathreatedf$date, xmax=deathreatedf$date+1, ymin=deathreatedf$China, ymax=deathreatedf[,"Korea, South"], alpha=0.1, colour="pink", fill="pink") +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathratedf$date, xmax=deathratedf$date+1, ymin=deathratedf$China, ymax=deathratedf[,"Korea, South"], alpha=0.1, colour="pink", fill="pink") +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
deathratedf$date = as.Date(deathratedf$date)
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathratedf$date, xmax=deathratedf$date, ymin=deathratedf$China, ymax=deathratedf[,"Korea, South"], alpha=0.1, colour="pink", fill="pink") +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
plot(P)
P
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathratedf$date, xmax=deathratedf$date,
ymin=deathratedf$China,
ymax=deathratedf[,"Korea, South"],
alpha=rep(0.1, nrow(deathratedf)),
colour=rep("pink", nrow(deathratedf)),
fill=rep("pink", nrow(deathratedf))) +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathratedf$date, xmax=deathratedf$date+1,
ymin=deathratedf$China,
ymax=deathratedf[,"Korea, South"],
alpha=rep(0.1, nrow(deathratedf)),
colour=rep("pink", nrow(deathratedf)),
fill=rep("pink", nrow(deathratedf))) +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
deathratedf$date
deathratedf$China
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathratedf$date, xmax=deathratedf$date+1,
ymin=deathratedf$China,
ymax=deathratedf[,"Korea, South"],
alpha=rep(0.1, nrow(deathratedf)),
fill=rep("pink", nrow(deathratedf))) +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=deathratedf$date, xmax=deathratedf$date+1,
ymin=deathratedf$China,
ymax=deathratedf[,"Korea, South"],
alpha=rep(0.1, nrow(deathratedf)),
fill=rep("pink", nrow(deathratedf)))
P
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.1,
fill="pink") +
geom_line() +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
textmat = casemat[which.max(casemat[,"China"]), ]
textdf = melt(textmat[,c(countries, date)])
textdf$date = as.Date(textdf$date)
textmat = casemat[which.max(casemat[,"China"]), ]
textmat
textdf = melt(as.data.frame(textmat[,c(countries, date)]))
textdf = melt(as.data.frame(textmat[,c(countries, "date")]))
head(textdf)
textdf$date = as.Date(textdf$date)
textdf$Label = paste("N =", comma(textdf$value))
textdf
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(date=textdf, aes(label=Label), colour='blue', y=0.03) +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
textdf$variable = as.Date(textdf$variable)
textdf = melt(as.data.frame(textmat[,c(countries, "date")]))
textdf$variable = as.Date(textdf$variable)
head(textdf)
textdf = melt(textmat[,c(countries, "date")])
head(textdf)
textmat = casemat[which.max(casemat[,"China"]), ]
textdf = melt(as.data.frame(textmat[,c(countries, "date")]))
textdf$date = as.Date(textdf$date)
textdf$Label = paste("N =", comma(textdf$value))
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(date=textdf, aes(label=Label), colour='blue', y=0.03) +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
head(textdf)
?geom_text
moltendf$Label = NA
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(date=textdf, aes(label=Label), colour='blue', y=0.03) +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
textdf$date = min(as.Date(deathratedf$date))
textdf$Label = paste("N =", comma(textdf$value))
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(date=textdf, aes(label=Label), colour='blue', y=0.03) +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
textdf$date = max(as.Date(deathratedf$date))/2
textdf$date = min(as.Date(deathratedf$date)) + 10
textdf$Label = paste("N =", comma(textdf$value))
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(date=textdf, aes(label=Label), colour='blue', y=0.03) +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
textdf$value = 0.05
textdf = melt(as.data.frame(textmat[,c(countries, "date")]))
textdf$date = min(as.Date(deathratedf$date)) + 10
textdf$Label = paste("N =", comma(textdf$value))
textdf$value = 0.05
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(date=textdf, aes(x=date, y=value, label=Label), colour='blue') +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
P = ggplot(moltendf, aes(x=date, y=value, group=variable)) +
geom_rect(xmin=min(deathratedf$date),
xmax=max(deathratedf$date+1),
ymin=max(deathratedf$China),
ymax=max(deathratedf[,"Korea, South"]),
alpha=0.05,
fill="pink") +
geom_line() +
geom_text(data=textdf, aes(x=date, y=value, label=Label), colour='blue') +
theme_bw(base_size=14) +
facet_wrap(~variable, scales="free") +
scale_y_continuous(
name="COVID-19 deathrate", labels=comma) +
xlab("Date as of outbreak") +
coord_cartesian(ylim=c(0, 0.1))
P
Sys.time()
round(23.01)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/Projects/covid19/deepBindResults/")
require(ggplot2)
require(reshape2)
require(scales)
require(ggrepel)
deepdf = read.csv("20200401_DeepBindRna.txt", header=T, row.names=1, sep="\t")
deepdf = read.csv("20200401_DeepBindRna.txt", header=T, sep="\t")
head(deepdf)
deepdf$kmer = paste("kmer", 1:nrow(deepdf))
moltendf = melt(deepdf)
head(moltendf)
moltendf$kmer = factor(moltendf$kmer, levels=paste("kmer", 1:nrow(deepdf)))
dim(deepdf)
moltendf$position = as.numeric(gsub("kmer ", "", as.character(moltendf$kmer)))
head(moltendf)
head(moltendf)
ls()
is.element(1, 1:3)
moltendf$Include = ifelse(moltendf$value > 7.5, TRUE, FALSE)
P = ggplot(moltendf, aes(x=position, y=value, colour=Include)) +
geom_point(alpha=0.2) +
geom_text_repel(data=moltendf[moltendf$Include, ], aes(label=variable), colour="purple")
P = ggplot(moltendf, aes(x=position, y=value, colour=Include)) +
geom_point(alpha=0.2) +
geom_text_repel(data=moltendf[moltendf$Include, ], aes(label=variable), colour="purple") +
theme_bw(base_size=18) +
scale_x_continuous("Genomic position", labels=comma) +
ylab("DeepBind score") +
theme(legend.position="bottom")
plot(P)
require(knitr)
dev.off()
require(knitr)
install.packages("BiocManager")
BiocManager::install("recount")
require(ggrepel)
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(reshape2)
require(scales)
require(ggrepel)
install.packages("ggplot2")
require(ggplot2)
remove.packages("ggplot2")
remove.packages("ggrepel")
install.packages("ggplot2")
require(ggplot2)
remove.packages("ggrepel")
remove.packages("ggplot2")
remove.packages("ggplot2", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("ggrepel", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
dir("/Library/Frameworks/R.framework/Versions/3.6/Resources/library/")
install.packages("ggplot2")
sort(dir("/Library/Frameworks/R.framework/Versions/3.6/Resources/library/"))
require(ggplot2)
?rse_gene
??rse_gene
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(reshape2)
require(scales)
require(ggrepel)
require(knitr)
require(recount)
rse_gene = rse_gene[,idx_rows]
if(!file.exists("SRP012682/rse_gene.Rdata")){
project_info <- abstract_search("GTEx")
project_info = project_info[
project_info$project=="SRP012682", ]
download_study(project_info$project[1])
}
regex = "(arter|lung|bronch|naso|nasa)"
colnames = c("smpthnts", "bigwig_file", "smtsd")
load("SRP012682/rse_gene.Rdata")
anndf = as.data.frame(colData(rse_gene))
idx_rows = which(apply(anndf[,colnames], 1, function(x){
return(ifelse(any(grepl(regex, tolower(x))), TRUE, FALSE))
}))
rse_gene = rse_gene[,idx_rows]
rse_gene
length(idx_rows)
dir()
dir()
rbps = c("YBX1", "A1CF", "SRSF10",
"PABPC4", "SART3", "CNOT4",
"HNRPLL")
zhoudf = read.csv("ZhouEtAl-2020.tsv", header=F, sep="\t")
head(zhoudf)
gordondf = read.csv("GordonEtAl-2020.tsv", header=T, sep="\t")
head(gordondf)
rbps = c("YBX1", "A1CF", "SRSF10",
"PABPC4", "SART3", "CNOT4",
"HNRPLL")
zhoudf = read.csv("ZhouEtAl-2020.tsv", header=F, sep="\t")
gordondf = read.csv("GordonEtAl-2020.tsv", header=T, sep="\t")
all_prs = unique(c(rbps, zhoudf[,2], gordondf$PreyGene)
)
all_prs
options(stringsAsFactors = FALSE)
rbps = c("YBX1", "A1CF", "SRSF10",
"PABPC4", "SART3", "CNOT4",
"HNRPLL")
zhoudf = read.csv("ZhouEtAl-2020.tsv", header=F, sep="\t")
gordondf = read.csv("GordonEtAl-2020.tsv", header=T, sep="\t")
all_prs = unique(c(rbps, zhoudf[,2], gordondf$PreyGene))
all_prs
genedf = as.data.frame(rowData(rse_gene))
head(genedf)
idx_cols = which(genedf$symbol %in% all_prs)
idx_cols
rse_gene = rse_gene[idx_cols, ]
rse_gene
rse = scale_counts(rse_gene)
head(rse)
length(all_prs)
head(rse)
dim(tse)
countdf = assays(rse)$counts
dim(countdf)
head(countdf)
countdf[1,1]
countdf[1,2]
countdf[1,3]
countdf[2,3]
head(countdf)
dim(countdf)
head(countdf[1:4, 1:4])
moltendf = melt(countdf)
head(moltendf)
head(genedf)
moltendf$Gene = genedf[moltendf$Var1, "symbol"]
head(moltendf)
?scale_counts
summary(moltendf$value)
moltendf = melt(countdf)
moltendf$Gene = genedf[moltendf$Var1, "symbol"]
P = ggplot(moltendf, aes(x=Gene, y=value)) +
geom_boxplot() +
theme_bw(base_size=18) +
xlab("") +
scale_y_log10(name="Reads scaled to coverage", scales=comma) +
annotation_logticks() +
theme(axis.text.x=element_text(angle=45, hjust=1))
require(scales)
P = ggplot(moltendf, aes(x=Gene, y=value)) +
geom_boxplot() +
theme_bw(base_size=18) +
xlab("") +
scale_y_log10(name="Reads scaled to coverage", labels=comma) +
annotation_logticks() +
theme(axis.text.x=element_text(angle=45, hjust=1))
plot(P)
head(moltendf)
moltendf$value[1]
moltendf$value[1] + moltendf$value[2]
P = ggplot(moltendf, aes(x=Gene, y=value)) +
geom_boxplot() +
theme_bw(base_size=18) +
xlab("") +
scale_y_log10(name="Reads scaled to coverage", labels=comma) +
theme(axis.text.x=element_text(angle=45, hjust=1))
plot(P)
P = ggplot(moltendf, aes(x=Gene, y=value)) +
geom_boxplot()
P
head(moltendf)
moltendf = melt(countdf)
moltendf$Gene = genedf[moltendf$Var1, "symbol"]
P = ggplot(moltendf, aes(x=Gene, y=value)) +
geom_boxplot() +
theme_bw(base_size=18) +
xlab("") +
scale_y_log10(name="Reads scaled to coverage", labels=comma) +
theme(axis.text.y=element_text(angle=45, hjust=1))
plot(P)
P = ggplot(moltendf, aes(x=factor(Gene), y=value)) +
geom_boxplot() +
theme_bw(base_size=18) +
xlab("") +
scale_y_log10(name="Reads scaled to coverage", labels=comma) +
theme(axis.text.x=element_text(angle=45, hjust=1))
plot(P)
head(moltendf)
summary(moltendf)
head(countdf)
dim(countdf)
str(countdf)
as.matrix(Countdf)
as.matrix(countdf)
is.matrix(countdf)
head(moltendf$Gene)
genedf[moltendf$Var1, "symbol"]
genedf[moltendf$Var1[1], "symbol"]
moltendf$Gene = as.character(genedf[moltendf$Var1, "symbol"])
head(moltendf$Gene[1])
P = ggplot(moltendf, aes(x=Gene, y=value)) +
geom_boxplot() +
theme_bw(base_size=18) +
xlab("") +
scale_y_log10(name="Reads scaled to coverage", labels=comma) +
theme(axis.text.x=element_text(angle=45, hjust=1))
plot(P)
?pheatmap
require(pheatmap)
?pheatmap
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/Projects/covid19/timeseries/JHU-2019nCoV-to-pandas-DF")
require(ggplot2)
require(reshape2)
require(scales)
require(ggrepel)
setwd("COVID-19/csse_covid_19_data/csse_covid_19_time_series")
casedf = read.csv("time_series_covid19_confirmed_global.csv", header=T, check.names=F)
setwd("COVID-19/csse_covid_19_data/csse_covid_19_time_series")
casedf = read.csv("time_series_covid19_confirmed_global.csv", header=T, check.names=F)
getwd()
setwd("~/Documents/Projects/covid19/timeseries/JHU-2019nCoV-to-pandas-DF")
setwd("COVID-19/csse_covid_19_data/csse_covid_19_time_series")
casedf = read.csv("time_series_covid19_confirmed_global.csv", header=T, check.names=F)
dir()
setwd("~/Documents/Projects/covid19/timeseries/JHU-2019nCoV-to-pandas-DF/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
casedf = read.csv("time_series_covid19_confirmed_global.csv", header=T, check.names=F)
dir()
casedf = read.csv("time_series_covid19_confirmed_global.csv", header=T, check.names=F)
casedf = read.csv("time_series_covid19_confirmed_global.csv", header=T, check.names=F)
casedf = casedf[casedf[,2]=="US", c(1, 5:ncol(casedf))]
head(casedf)
casedf = read.csv("time_series_covid19_confirmed_US.csv", header=T, check.names=F)
head(casedf)
casedf = casedf[casedf$Country_Region=="US", c(1, 12:ncol(casedf))]
head(casedf)
provinces = casedf[apply(casedf[,2:ncol(casedf)], 1, sum) > 0, 1]
provinces
casedf = read.csv("time_series_covid19_confirmed_US.csv", header=T, check.names=F)
casedf = read.csv("time_series_covid19_confirmed_US.csv", header=T, check.names=F)
head(casedf)
casedf = casedf[casedf$Country_Region=="US", c(7, 12:ncol(casedf))]
provinces = casedf[apply(casedf[,2:ncol(casedf)], 1, sum) > 0, 1]
casedf = casedf[casedf[,1] %in% provinces,]
provinces
unique(proivnces)
unique(provinces)
head(casedf[1:3, 1:1])
head(casedf[1:3, 1:3])
table(casedf[,1])
tempdf = casedf[casedf[,1]=="Wisconsin",]
tempdf[,1]
